name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build:
    name: Build binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x64
            ext: ""
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: linux-arm64
            ext: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x64
            ext: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x64
            ext: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-arm64
            ext: ""
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get tag information
      id: tag_info
      shell: bash
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        VERSION=${TAG#v}
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Tag: $TAG, Version: $VERSION"
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev libgtk-3-dev libxcb1-dev libxrandr-dev libxss-dev libglib2.0-dev libgtk-3-dev libgdk-pixbuf2.0-dev libcairo-gobject2 libx11-dev libxext-dev
    
    - name: Install ARM64 cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get install -y gcc-aarch64-linux-gnu
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
    
    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Prepare binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        BINARY_NAME="notes-${{ steps.tag_info.outputs.version }}-${{ matrix.name }}${{ matrix.ext }}"
        cp target/${{ matrix.target }}/release/notes${{ matrix.ext }} $BINARY_NAME
        chmod +x $BINARY_NAME
        echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
    
    - name: Prepare binary (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        BINARY_NAME="notes-${{ steps.tag_info.outputs.version }}-${{ matrix.name }}${{ matrix.ext }}"
        cp target/${{ matrix.target }}/release/notes${{ matrix.ext }} $BINARY_NAME
        echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.BINARY_NAME }}
        path: ${{ env.BINARY_NAME }}
  
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get tag information
      id: tag_info
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        VERSION=${TAG#v}
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Tag: $TAG, Version: $VERSION"
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git tag --sort=-version:refname | head -2 | tail -1)
        
        # If this is the first tag, compare with initial commit
        if [ -z "$PREV_TAG" ] || [ "$PREV_TAG" = "${{ steps.tag_info.outputs.tag }}" ]; then
          PREV_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        
        echo "Generating changelog from $PREV_TAG to ${{ steps.tag_info.outputs.tag }}"
        
        # Generate changelog
        CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREV_TAG..${{ steps.tag_info.outputs.tag }} | head -50)
        
        # If no commits, add a default message
        if [ -z "$CHANGELOG" ]; then
          CHANGELOG="- Initial release"
        fi
        
        # Save changelog to file and output
        echo "$CHANGELOG" > changelog.txt
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Check if pre-release
      id: prerelease
      run: |
        TAG=${{ steps.tag_info.outputs.tag }}
        if [[ "$TAG" == *"alpha"* ]] || [[ "$TAG" == *"beta"* ]] || [[ "$TAG" == *"rc"* ]] || [[ "$TAG" == *"-"* ]]; then
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "This is a pre-release: $TAG"
        else
          echo "prerelease=false" >> $GITHUB_OUTPUT
          echo "This is a stable release: $TAG"
        fi
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag_info.outputs.tag }}
        name: Notes ${{ steps.tag_info.outputs.tag }}
        body: |
          ## Notes ${{ steps.tag_info.outputs.tag }}
          
          A simple and elegant notes application built with Rust.
          
          ### What's New
          ${{ steps.changelog.outputs.changelog }}
          
          ### Downloads
          
          Choose the appropriate binary for your platform:
          
          - **Linux x64 (Intel/AMD)**: `notes-${{ steps.tag_info.outputs.version }}-linux-x64`
          - **Linux ARM64**: `notes-${{ steps.tag_info.outputs.version }}-linux-arm64`
          - **Windows (x64)**: `notes-${{ steps.tag_info.outputs.version }}-windows-x64.exe`  
          - **macOS Intel (x64)**: `notes-${{ steps.tag_info.outputs.version }}-macos-x64`
          - **macOS Apple Silicon (ARM64)**: `notes-${{ steps.tag_info.outputs.version }}-macos-arm64`
          
          ### Installation
          
          1. Download the appropriate binary for your platform
          2. Make it executable (Linux/macOS): `chmod +x notes-*`
          3. Run the application: `./notes-*` (or double-click on Windows)

          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.tag_info.outputs.tag }}...HEAD
        draft: false
        prerelease: ${{ steps.prerelease.outputs.prerelease }}
        files: |
          notes-${{ steps.tag_info.outputs.version }}-linux-x64/notes-${{ steps.tag_info.outputs.version }}-linux-x64
          notes-${{ steps.tag_info.outputs.version }}-linux-arm64/notes-${{ steps.tag_info.outputs.version }}-linux-arm64
          notes-${{ steps.tag_info.outputs.version }}-windows-x64.exe/notes-${{ steps.tag_info.outputs.version }}-windows-x64.exe
          notes-${{ steps.tag_info.outputs.version }}-macos-x64/notes-${{ steps.tag_info.outputs.version }}-macos-x64
          notes-${{ steps.tag_info.outputs.version }}-macos-arm64/notes-${{ steps.tag_info.outputs.version }}-macos-arm64